# configure.in - HTML TidyLib GNU autoconf input file
#
# Copyright (c) 2003-2004 World Wide Web Consortium
# (Massachusetts Institute of Technology, European Research 
# Consortium for Informatics and Mathematics, Keio University).
# All Rights Reserved.
#
# CVS Info :
#
#   $Author: arnaud02 $ 
#   $Date: 2008/03/24 21:08:16 $ 
#   $Revision: 1.4 $ 
#

AC_INIT([tidy], [0.99.0])

AC_CANONICAL_SYSTEM
AC_CANONICAL_HOST
AC_CONFIG_SRCDIR([src/tidylib.c])
#AC_CONFIG_AUX_DIR([build/scripts])
AC_CONFIG_MACRO_DIR([m4])

AM_INIT_AUTOMAKE([1.10 check-news dist-bzip2 dist-zip dist-tarZ]) 

# Minimum Autoconf version required.
AC_PREREQ([2.62])

AC_CONFIG_HEADERS([src/tidysyscfg.h])

















# #########################################################################
#
# Construct a build number to go with the major.minor release version.
#

# one build every three hours is the fastest I can do... I guess ;-)
# At least this'll give me at least 3 years of build numbering before I run out of
# the 4 digit set. And then who cares when a fifth digit is required, eh?

let "buildnumber=(`date +%s` - 1185402255) / 10800"

TAR_FILENAME_POSTFIX=Ger-$buildnumber
AC_DEFINE_UNQUOTED(TAR_FILENAME_POSTFIX, "$TAR_FILENAME_POSTFIX", [distribution archive filename postfix code of the software])
AC_SUBST(TAR_FILENAME_POSTFIX)

#REVISION=`date +%Y%m%dT%H%M`
REVISION=$buildnumber
AC_DEFINE_UNQUOTED(REVISION, ["$REVISION"], [revision number of software])
AC_SUBST(REVISION)

# VER_SUFFIX=Ger-`date +%m%dT%H`
VER_SUFFIX=
AC_DEFINE_UNQUOTED(VER_SUFFIX, "$VER_SUFFIX", [version suffix code of the software])
AC_SUBST(VER_SUFFIX)

VERSION_TIMESTAMP=`echo $PACKAGE_VERSION | sed -e 's/-.*//'`
VERSION_TAG=`echo $PACKAGE_VERSION | sed -e 's/.*-//'`

AC_DEFINE_UNQUOTED(VERSION_TIMESTAMP, "$VERSION_TIMESTAMP", [version timestamp (YYYYMMDD) of the software])
AC_SUBST(VERSION_TIMESTAMP)

AC_DEFINE_UNQUOTED(VERSION_TAG, "$VERSION_TAG", [version tag (BlameSomebody) of the software])
AC_SUBST(VERSION_TAG)














# Making releases:
# 
#   TIDY_MICRO_VERSION += 1;
#   TIDY_INTERFACE_AGE += 1;
#   TIDY_BINARY_AGE += 1;
# 
# if any functions have been added, set TIDY_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set TIDY_BINARY_AGE and TIDY_INTERFACE_AGE to 0.
# 
TIDY_MAJOR_VERSION=0
TIDY_MINOR_VERSION=99
TIDY_MICRO_VERSION=0
TIDY_INTERFACE_AGE=0
TIDY_BINARY_AGE=0

LIBTIDY_VERSION=$TIDY_MAJOR_VERSION.$TIDY_MINOR_VERSION.$TIDY_MICRO_VERSION

#AC_SUBST(LIBTIDY_VERSION)

# libtool versioning
# 
LT_RELEASE=$TIDY_MAJOR_VERSION.$TIDY_MINOR_VERSION
LT_CURRENT=`expr $TIDY_MICRO_VERSION - $TIDY_INTERFACE_AGE`
LT_REVISION=$TIDY_INTERFACE_AGE
LT_AGE=`expr $TIDY_BINARY_AGE - $TIDY_INTERFACE_AGE`

#AC_SUBST(LT_RELEASE)
#AC_SUBST(LT_CURRENT)
#AC_SUBST(LT_REVISION)
#AC_SUBST(LT_AGE)

#AC_INIT([tidy], [0.99.0])







# local use only (no caching)
#
# AX_ADD_OPTION(<var>, <option>)
#
# Only add option $2 to var $1 if it's not already in there.
#
# Note that the new option-to-be-added is added AT THE FRONT.
# Sometimes it doesn't matter, but it MIGHT make a difference
# for particular items, such as -I include paths and such...
#
AC_DEFUN([AX_ADD_OPTION],
  [
    # split option list up into separate part; then check each item
    # once done, append AT FRONT of $1, but the order within $2 is
    # kept intact!
    ax_ao_list="$2"
    ax_ao_accepted_set=""
    for ax_ao_e in ${ax_ao_list}
    do
      case " [$]{$1} " in
        *" ${ax_ao_e} "* )
                   ;;
        *        )
                   if test -z "${ax_ao_accepted_set}" ; then
                     ax_ao_accepted_set="${ax_ao_e}"
                   else
                     ax_ao_accepted_set="${ax_ao_accepted_set} ${ax_ao_e}"
                   fi
                   ;;
      esac
    done
    $1="${ax_ao_accepted_set} [$]{$1}"
  ])








# ##################################################################
#
# Checks for programs.
#


# =============================================
# AC_PROG_CC has a habit of adding -g to CFLAGS
# 
#save_cflags="$CFLAGS"

AC_PROG_CC
AC_PROG_CXX
AC_PROG_CC_STDC   # check for ISO/C99 options for the compilers, if available. Be hip, don't be square.
AC_USE_SYSTEM_EXTENSIONS

AM_MAINTAINER_MODE


# AC_PROG_RANLIB  -- rendered obsolete by LT_INIT
LT_INIT

AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_SED
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S
AC_PROG_CPP
AC_PROG_CPP_WERROR
AC_PROG_LD_GNU
AC_PROG_LD
AC_PATH_PROG([SEVEN_ZIP], [7z], [])
AC_PATH_PROG([LZMA], [lzma], [])
AC_PATH_PROG([ZIP], [zip], [])
AC_PATH_PROG([TAR], [tar], [])
AC_PATH_PROG([COMPRESS], [compress], [])
AC_PATH_PROG([SHAR], [shar], [])
AC_PATH_PROG([BZIP2], [bzip2], [])
AC_PATH_PROG([GZIP], [gzip], [gzip])






AM_CONDITIONAL([OS_HAS_SEVEN_ZIP], [test -n "$SEVEN_ZIP"])
AM_CONDITIONAL([OS_HAS_LZMA], [test -n "$LZMA"])
AM_CONDITIONAL([OS_HAS_ZIP], [test -n "$ZIP"])
AM_CONDITIONAL([OS_HAS_TAR], [test -n "$TAR"])
AM_CONDITIONAL([OS_HAS_COMPRESS], [test -n "$COMPRESS"])
AM_CONDITIONAL([OS_HAS_SHAR], [test -n "$SHAR"])
AM_CONDITIONAL([OS_HAS_GZIP], [test -n "$GZIP"])
AM_CONDITIONAL([OS_HAS_BZIP2], [test -n "$BZIP2"])
AC_HEADER_STDC
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_TYPE_OFF_T


AC_SUBST(LIBTIDY_VERSION)

AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)


#
# debug or release build of the binary?
#
AC_MSG_CHECKING([if we want a debug or release build])
AC_ARG_ENABLE([debug], AC_HELP_STRING([--disable-debug],
  [Specify to create a so-called 'production' or 'release build'.
You can explicitly specify '--enable-debug' to create a standard
TIDY (debuggable) build. (default: debugging turned OFF)]),
  [
   #
   # since AC_PROG_CC sets '-O2' in CFLAGS by default, while _we_'d like
   # to have '-O3', we override the operation (for gcc only) right here.
   # Of course, this is rather hackish, so if anyone knows about a cleaner
   # solution, I'm all for it!
   #                                               Ger Hobbelt
   if test ! -z "$SED"; then
     CFLAGS=`echo " $CFLAGS " | $SED -e 's:-O[[0-3]] : :' -e 's:-g : :' -e 's:  : :g'`
     CXXFLAGS=`echo " $CXXFLAGS " | $SED -e 's:-O[[0-3]] : :' -e 's:-g : :' -e 's:  : :g'`
   fi
   if eval "test x$enable_debug = xyes"; then
     AC_MSG_RESULT([debug])
     AX_CFLAGS_GCC_OPTION([-O0])
     AX_CFLAGS_GCC_OPTION([-g3],
       [],
       [],
       [AX_CFLAGS_GCC_OPTION([-g])]) # symbolic debugging
     AX_CXXFLAGS_GCC_OPTION([-O0])
     AX_CXXFLAGS_GCC_OPTION([-g3],
       [],
       [],
       [AX_CXXFLAGS_GCC_OPTION([-g])]) # symbolic debugging
     WITH_BUILD="debug"
     WITH_DEBUGGING=yes
   else
     AC_MSG_RESULT([release])
     AX_CFLAGS_GCC_OPTION([-O3],
       [],
       [],
       [AX_CFLAGS_GCC_OPTION([-O2])])
     AX_CXXFLAGS_GCC_OPTION([-O3],
       [],
       [],
       [AX_CXXFLAGS_GCC_OPTION([-O2])])
     WITH_BUILD="release (maximum optimizations)"
     WITH_DEBUGGING=no
   fi
  ],
  [
   AC_MSG_RESULT([default])
   if test ! -z "$SED"; then
     if test -z `echo " $CFLAGS " | $SED -e 's:.* \(-O[[0-3]]\) .*:\1:'`; then
       # only add '-O2' if there's no '-O expression custom defined yet (by the user before [s]he started ./configure)
       AX_CFLAGS_GCC_OPTION([-O2])
     fi
     if test -z `echo " $CXXFLAGS " | $SED -e 's:.* \(-O[[0-3]]\) .*:\1:'`; then
       # only add '-O2' if there's no '-O expression custom defined yet (by the user before [s]he started ./configure)
       AX_CXXFLAGS_GCC_OPTION([-O2])
     fi
   fi
  WITH_BUILD="release (default optimizations)"
   WITH_DEBUGGING=no
  ])



#
# include run-time profiling support (requires the use of specific development tools: prof/gprof)
#
WITH_GPROFILING="no"
WITH_PROFILING="no"

AC_MSG_CHECKING([if we want to instrument the build for profiling])
AC_ARG_ENABLE([profiling], AC_HELP_STRING([--enable-profiling],
  [You can explicitly specify '--enable-profiling' to
create a TIDY build which can be profiled with, for 
example, gprof. (default: profiling turned OFF)]),
  [
   AC_MSG_RESULT([$enable_profiling])
   ac_profiling_cc_flags=""
   AX_CFLAGS_GCC_OPTION([-pg], [ac_profiling_cc_flags],
    	[
         WITH_GPROFILING="yes"
         AC_MSG_RESULT([$enable_profiling (gprof)])
        ],
   	[
   	 AX_CFLAGS_GCC_OPTION([-p], [ac_profiling_cc_flags],
   		[
   		WITH_PROFILING="yes"
   		AC_MSG_RESULT([$enable_profiling (prof)])
   		])
       ])
   AX_CXXFLAGS_GCC_OPTION([-pg], [ac_profiling_cc_flags],
    	[
         WITH_GPROFILING="yes"
         AC_MSG_RESULT([$enable_profiling (gprof)])
        ],
   	[
   	 AX_CXXFLAGS_GCC_OPTION([-p], [ac_profiling_cc_flags],
   		[
   		WITH_PROFILING="yes"
   		AC_MSG_RESULT([$enable_profiling (prof)])
   		])
       ])
   # delay copying into CFLAGS/CXXFLAGS/LDFLAGS; we don't want to influence the cc used to test stuff in this configure script
  ],
  [AC_MSG_RESULT([no])])

#
# maximum warning level for neurotic developers? (default = yes)
#
AC_MSG_CHECKING([if we want maximum compiler warnings])
AC_ARG_ENABLE([extended-compile-warnings],
  AC_HELP_STRING([--disable-extended-compile-warnings],
    [turn maximum compiler/linker warnings level off
(default: turn on all warnings)]),
  [
   AC_MSG_RESULT([$enable_extended_compile_warnings])
   if eval "test x$enable_extended_compile_warnings = xyes"; then
     AX_CFLAGS_WARN_ALL([])
     AX_CXXFLAGS_WARN_ALL([])
   fi
  ],
  [
   AC_MSG_RESULT([yes])
   AX_CFLAGS_WARN_ALL([])
   AX_CXXFLAGS_WARN_ALL([])
   AX_CFLAGS_GCC_OPTION([-Wno-switch])
   AX_CFLAGS_GCC_OPTION([-Wno-parentheses]) 
   AX_CFLAGS_GCC_OPTION([-Wno-unused])
  ])

#
# Do you want those ASSERT() calls active in your run-time or removed by the compiler?
#
AC_MSG_CHECKING([if we want run-time assertions])
AC_ARG_ENABLE([assertions],
  AC_HELP_STRING([--disable-assertions],
    [turn assertion checks off.
This will produce a faster running executable but such at the cost
of lacking a specific type of 'developer' checks. These SHOULD not
get triggered EVER, so you MAY assume specifying this option is
a 'free speedup'. (default: assertions are ENABLED)]),
  [
   AC_MSG_RESULT($enable_assertions)
   if eval "test x$enable_assertions = xno"; then
     AC_DEFINE_UNQUOTED(TIDY_DONT_ASSERT, 1, [DISable ASSERT/VERIFY checks])
   fi
  ],
  [
   AC_MSG_RESULT([yes])
  ])



WARNING_CFLAGS=""
AC_SUBST(WARNING_CFLAGS)



# 
# =============================================


support_access=yes
AC_ARG_ENABLE(access,[  --enable-access         support accessibility checks],[
	if test "x$enableval" = "xno"; then
		support_access=no
	fi
])
if test $support_access = yes; then
	AC_DEFINE([SUPPORT_ACCESSIBILITY_CHECKS], [1], [enabled])
else
	AC_DEFINE([SUPPORT_ACCESSIBILITY_CHECKS], [0], [disabled])
fi

support_utf16=yes
AC_ARG_ENABLE(utf16,[  --enable-utf16          support UTF-16 encoding],[
	if test "x$enableval" = "xno"; then
		support_utf16=no
	fi
])
if test $support_utf16 = yes; then
	AC_DEFINE([SUPPORT_UTF16_ENCODINGS], [1], [enabled])
else
	AC_DEFINE([SUPPORT_UTF16_ENCODINGS], [0], [disabled])
fi

support_asian=yes
AC_ARG_ENABLE(asian,[  --enable-asian          support asian encodings],[
	if test "x$enableval" = "xno"; then
		support_asian=no
	fi
])
if test $support_asian = yes; then
	AC_DEFINE([SUPPORT_ASIAN_ENCODINGS], [1], [enabled])
else
	AC_DEFINE([SUPPORT_ASIAN_ENCODINGS], [0], [disabled])
fi

# TODO: this defines "WITH_DMALLOC" but tidy expects "DMALLOC"
#       need to do: #if defined(DMALLOC) || defined(WITH_DMALLOC)
# 
AM_WITH_DMALLOC






# AC_DEFINE_UNQUOTED(SILENT, "@", [silent mode for make])
SILENT="@"
AC_SUBST(SILENT)




# write delayed options into CFLAGS/LDFLAGS:
AX_ADD_OPTION([CFLAGS], [$ac_profiling_cc_flags])
AX_ADD_OPTION([CXXFLAGS], [$ac_profiling_cc_flags])
AX_ADD_OPTION([LDFLAGS], [$ac_profiling_cc_flags])



AC_OUTPUT([
	Makefile
	src/Makefile
	console/Makefile
	include/Makefile
	test/Makefile
],
[
	#
	# and when we finally have produced the files, make sure the generated shell scripts are executable:
	#
	chmod a+x src/*.sh          2> /dev/null
	chmod a+x test/*.sh         2> /dev/null
])




dnl Print configuration summary

my_installpath=`eval echo $exec_prefix`

cat <<EOF

Configuration summary
=====================

TIDY is now configured as follows:

* Compilation environment

  CC           = $CC
  CFLAGS       = $CFLAGS
  CPP          = $CPP
  CPPFLAGS     = $CPPFLAGS
  CXX          = $CXX
  CXXFLAGS     = $CXXFLAGS
  LD           = $LD
  LDFLAGS      = $LDFLAGS
  LIBS         = $LIBS
  INSTALLFLAGS = $INSTALLFLAGS
  BINDIR       = $BIN_PATH

* TIDY options

  Development-time debugging:             $WITH_DEBUGGING
  Allow profiling using gprof:            $WITH_GPROFILING
  Allow profiling using prof:             $WITH_PROFILING
  Include debug features:                 $WITH_DEBUG_FEATURES
  Build:                                  $WITH_BUILD

-----------------------------------------------------------------------

Congratulations, your $PACKAGE_NAME $PACKAGE_VERSION is configured now.
You can now build and install $PACKAGE_NAME using the Makefile, by calling

  \$ make

Before running 

  \$ make install

you may wish to test the newly built binary by running

  \$ make check

Any unacceptable mistakes will be reported and cause the 'check' run to abort.

EOF



